<h1>麻雀 点数計算</h1>

<div id="score_display">点数がここに表示されます</div>

<!-- 親と子の選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="role" value="parent" checked> 親
  </label>
  <label>
    <input type="radio" name="role" value="child"> 子
  </label>
</div>

<!-- ツモとロンの選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="winType" value="tsumo" checked> ツモ
  </label>
  <label>
    <input type="radio" name="winType" value="ron"> ロン
  </label>
</div>

<!-- 面前（鳴きなし）と鳴きありの選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="menzen" value="none" checked> 鳴きなし（面前）
  </label>
  <label>
    <input type="radio" name="menzen" value="open"> 鳴きあり
  </label>
</div>

<% @yaku_values.each do |yaku, score| %>
  <button class="yaku-button" data-han="<%= score[:han] %>" data-fu="<%= score[:fu] %>"><%= yaku %></button>
<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const buttons = document.querySelectorAll('.yaku-button');
    const scoreDisplay = document.getElementById('score_display');
    const roleRadios = document.querySelectorAll('input[name="role"]');
    const winTypeRadios = document.querySelectorAll('input[name="winType"]');
    const menzenRadios = document.querySelectorAll('input[name="menzen"]'); // 面前と鳴きのラジオボタン
    let totalHan = 0; // 合計翻を保持する変数
    let totalFu = 20;  // 合計符を保持する変数
    let selectedYaku = []; // 選択された役を保持する配列
    let currentRole = 'parent'; // 初期値は親
    let currentWinType = 'tsumo'; // 初期値はツモ
    let currentMenzen = 'none'; // 初期値は鳴きなし（面前）

    const yakuValues = <%= raw @yaku_values.to_json %>;
    const yakuScore = <%= raw @yaku_score.to_json %>;

    // スコア表示を更新する関数
    function updateScoreDisplay() {
      let roundedFu;
      if (selectedYaku.includes('七対子')) {
        roundedFu = 25; // 七対子は符25固定
      } else if (selectedYaku.includes('平和')) {
        // 平和の特殊ルール: ツモなら20符、ロンなら30符
        if (currentWinType === 'tsumo') {
          roundedFu = 20;
        } else {
          roundedFu = 30;
        }
      } else {
        roundedFu = Math.ceil(totalFu / 10) * 10;
      }

      const scoreKey = `han:${totalHan},fu:${roundedFu}`;
      let totalScore = 0;
      if (yakuScore[scoreKey] && yakuScore[scoreKey][currentRole]) {
        totalScore = yakuScore[scoreKey][currentRole][currentWinType];
      }

      // 合計翻と符を表示
      scoreDisplay.textContent = `合計翻: ${totalHan}, 合計符: ${roundedFu}, 合計点数: ${totalScore}点, 選択された役: ${selectedYaku.join(', ')}`;
    }

    // 親と子の切り替え
    roleRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        currentRole = this.value;
        updateScoreDisplay();
      });
    });

    // ツモとロンの切り替え
    winTypeRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        currentWinType = this.value;
        updateScoreDisplay();
      });
    });

    // 鳴きなし（面前）と鳴きありの切り替え
    menzenRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        currentMenzen = this.value;
        updateScoreDisplay();
      });
    });

    buttons.forEach(button => {
      let isSelected = false;

      button.addEventListener('click', function() {
        const yakuName = this.textContent;

        if (isSelected) {
          totalHan -= yakuValues[yakuName].han;
          totalFu -= yakuValues[yakuName].fu;
          selectedYaku = selectedYaku.filter(yaku => yaku !== yakuName);
          this.classList.remove('selected');
        } else {
          totalHan += yakuValues[yakuName].han;
          totalFu += yakuValues[yakuName].fu;
          selectedYaku.push(yakuName);
          this.classList.add('selected');
        }

        isSelected = !isSelected;
        updateScoreDisplay();
      });
    });
  });
</script>
