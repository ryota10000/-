<h1>麻雀 点数計算</h1>

<div id="score_display">点数がここに表示されます</div>

<!-- 親と子の選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="role" value="parent" checked> 親
  </label>
  <label>
    <input type="radio" name="role" value="child"> 子
  </label>
</div>

<% @yaku_values.each do |yaku, score| %>
  <button class="yaku-button" data-han="<%= score[:han] %>" data-fu="<%= score[:fu] %>"><%= yaku %></button>
<% end %>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const buttons = document.querySelectorAll('.yaku-button');
    const scoreDisplay = document.getElementById('score_display');
    const roleRadios = document.querySelectorAll('input[name="role"]'); // 親と子のラジオボタン
    let totalHan = 0; // 合計翻を保持する変数
    let totalFu = 20;  // 合計符を保持する変数
    let selectedYaku = []; // 選択された役を保持する配列
    let currentRole = 'parent'; // 初期値は親

    // コントローラーから渡された役の値をJavaScriptに渡す
    const yakuValues = <%= raw @yaku_values.to_json %>;
    const yakuScore = <%= raw @yaku_score.to_json %>; // 親と子の点数データ

    // スコア表示を更新する関数
    function updateScoreDisplay() {
      // 七対子が選択されている場合は符を25に固定、それ以外は10単位で切り上げ
      let roundedFu;
      if (selectedYaku.includes('七対子')) {
        roundedFu = 25;  // 符を25に固定
      } else {
        // そうでない場合は10単位で切り上げ
        roundedFu = Math.ceil(totalFu / 10) * 10;
      }

      // 翻と符の組み合わせに基づいた点数を取得するためのキーを作成
      const scoreKey = `han:${totalHan},fu:${roundedFu}`;

      // コントローラーから渡された得点表を参照して、翻と符の組み合わせに基づいた点数を取得
      const totalScore = yakuScore[scoreKey] ? yakuScore[scoreKey][currentRole] : 0;

      // 合計翻と符を表示
      scoreDisplay.textContent = `合計翻: ${totalHan}, 合計符: ${roundedFu}, 合計点数: ${totalScore}点, 選択された役: ${selectedYaku.join(', ')}`;
    }

    // 親と子の切り替え
    roleRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        currentRole = this.value; // 'parent' か 'child' に変更
        updateScoreDisplay(); // 点数表示を更新
      });
    });

    buttons.forEach(button => {
      let isSelected = false; // ボタンが選択されているかを追跡するフラグ

      button.addEventListener('click', function() {
        const yakuName = this.textContent; // 役の名前を取得

        if (isSelected) {
          // すでに選択されている場合は翻と符を減算
          totalHan -= yakuValues[yakuName].han;
          totalFu -= yakuValues[yakuName].fu;
          selectedYaku = selectedYaku.filter(yaku => yaku !== yakuName); // 選択された役から削除
          this.classList.remove('selected'); // ボタンの状態を元に戻す
        } else {
          // 選択されていない場合は翻と符を加算
          totalHan += yakuValues[yakuName].han;
          totalFu += yakuValues[yakuName].fu;
          selectedYaku.push(yakuName); // 選択された役に追加
          this.classList.add('selected'); // ボタンが選択されていることを示すクラス
        }

        isSelected = !isSelected; // 状態を反転
        updateScoreDisplay(); // 点数を更新
      });
    });
  });
</script>
