<h1>麻雀 点数計算</h1>

<div id="score_display">点数がここに表示されます</div>

<!-- 親と子の選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="role" value="parent" checked> 親
  </label>
  <label>
    <input type="radio" name="role" value="child"> 子
  </label>
</div>

<!-- ツモとロンの選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="winType" value="tumo" checked> ツモ
  </label>
  <label>
    <input type="radio" name="winType" value="ron"> ロン
  </label>
</div>

<!-- 面前（鳴きなし）と鳴きありの選択肢を追加 -->
<div>
  <label>
    <input type="radio" name="menzen" value="none" checked> 鳴きなし（門前）
  </label>
  <label>
    <input type="radio" name="menzen" value="naki"> 鳴きあり
  </label>
</div>

<!-- ドラ枚数選択ボタンを追加 -->
<div id="dora-selection">
  <label>ドラ枚数:</label>
  <button class="dora-button" data-dora="0">0</button>
  <button class="dora-button" data-dora="1">1</button>
  <button class="dora-button" data-dora="2">2</button>
  <button class="dora-button" data-dora="3">3</button>
  <button class="dora-button" data-dora="4">4</button>
  <button class="dora-button" data-dora="5">5</button>
  <button class="dora-button" data-dora="6">6</button>
  <button class="dora-button" data-dora="7">7</button>
  <button class="dora-button" data-dora="8">8</button>
  <button class="dora-button" data-dora="9">9</button>
  <button class="dora-button" data-dora="10">10</button>
  <button class="dora-button" data-dora="11">11</button>
  <button class="dora-button" data-dora="12">12以上</button>
</div>

<% @yaku_values.each do |yaku, score| %>
  <button class="yaku-button" data-han="<%= score[:han] %>" data-fu="<%= score[:fu] %>"><%= yaku %></button>
<% end %>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const buttons = document.querySelectorAll('.yaku-button');
  const scoreDisplay = document.getElementById('score_display');
  const roleRadios = document.querySelectorAll('input[name="role"]');
  const winTypeRadios = document.querySelectorAll('input[name="winType"]');
  const menzenRadios = document.querySelectorAll('input[name="menzen"]');
  const doraButtons = document.querySelectorAll('.dora-button'); // ドラ枚数ボタン
  let basicHan = 0; // 基本の合計翻を保持する変数
  let totalHan = 0; // 最終的な合計翻を保持する変数
  let basicFu = 20; // 基本の合計符を保持する変数
  let totalFu = 0;  // 最終的な合計符を保持する変数
  let selectedYaku = []; // 選択された役を保持する配列
  let currentRole = 'parent'; // 初期値は親
  let currentWinType = 'tumo'; // 初期値はツモ
  let currentMenzen = 'none'; // 初期値は鳴きなし（面前）
  let totalDora = 0; // ドラ枚数を保持

  const yakuValues = <%= raw @yaku_values.to_json %>;
  const yakuScore = <%= raw @yaku_score.to_json %>;

  // ドラ枚数計算
  function calculateDoraBonus() {
    return totalDora;
  }

  // スコア表示を更新する関数
  function updateScoreDisplay() {
    totalFu = basicFu;

    // 七対子,平和の符計算
    if (selectedYaku.includes('七対子')) {
      totalFu = 25;
    } else if (selectedYaku.includes('平和')) {
      if (currentWinType === 'tumo') {
        totalFu = 20;
      } else if (currentWinType === 'ron') {
        totalFu = 30;
      }
    } else {
      if (currentWinType === 'ron' && currentMenzen === 'none') {
        totalFu += 10; // 鳴きなしのロンは10符加算
      } else if (currentWinType === 'tumo') {
        totalFu += 2; // ツモなら符を2加算
      }
      totalFu = Math.ceil(totalFu / 10) * 10; // 10単位で切り上げ
    }

    totalHan = basicHan + calculateDoraBonus(); // ドラボーナスを加算

    // スコアキーを生成
    let scoreKey;
    if (totalHan >= 13) {
      scoreKey = 'han:over13,fu:any'; // 役満以上の場合
    } else if (totalHan >= 5) {
      scoreKey = `han:${totalHan},fu:any`; // 満貫以上の場合
    } else if (totalHan === 4 && totalFu >= 30) {
      scoreKey = 'han:4,fu:over30'; // 30符以上の4翻
    } else if (totalHan === 3 && totalFu >= 60) {
      scoreKey = 'han:3,fu:over60'; // 60符以上の3翻
    } else {
      scoreKey = `han:${totalHan},fu:${totalFu}`; // 通常の翻と符の組み合わせ
    }

    // スコアを取得
    let totalScore = 'N/A';
    if (yakuScore[scoreKey] && yakuScore[scoreKey][currentRole]) {
      totalScore = yakuScore[scoreKey][currentRole][currentWinType] || 'N/A';
    }

    scoreDisplay.textContent = `合計翻: ${totalHan}, 合計符: ${totalFu}, 合計点数: ${totalScore}, ドラ枚数: ${totalDora}, 選択された役: ${selectedYaku.join(', ')}`;
  }

  // 親と子の切り替え
  roleRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      currentRole = this.value;
      updateScoreDisplay();
    });
  });

  // ツモとロンの切り替え
  winTypeRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      currentWinType = this.value;
      updateScoreDisplay();
    });
  });

  // 鳴きなし（面前）と鳴きありの切り替え
  menzenRadios.forEach(radio => {
    radio.addEventListener('change', function() {
      currentMenzen = this.value;
      updateScoreDisplay();
    });
  });

  // ドラ枚数ボタンのクリックイベント
  doraButtons.forEach(button => {
    button.addEventListener('click', function() {
      totalDora = parseInt(this.dataset.dora);
      updateScoreDisplay();
    });
  });

  // 役ボタンのクリックイベント
  buttons.forEach(button => {
    button.dataset.isSelected = 'false';

    button.addEventListener('click', function() {
      const yakuName = this.textContent;

      if (this.dataset.isSelected === 'true') {
        basicHan -= yakuValues[yakuName].han;
        basicFu -= yakuValues[yakuName].fu;
        selectedYaku = selectedYaku.filter(yaku => yaku !== yakuName);
        this.classList.remove('selected');
        this.dataset.isSelected = 'false';
      } else {
        basicHan += yakuValues[yakuName].han;
        basicFu += yakuValues[yakuName].fu;
        selectedYaku.push(yakuName);
        this.classList.add('selected');
        this.dataset.isSelected = 'true';
      }

      updateScoreDisplay();
    });
  });
});
</script>
